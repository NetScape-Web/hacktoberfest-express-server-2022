import UserModel from "../models/User.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import Problem from "../middlewares/problem.js";

const userRegistration = async (req, res, next) => {
  const { name, email, password, cpassword, phone, admin = false } = req.body;
  /*errors generated by required fields and confirm password are
  handled at the model layer */

  try {
    /* password hashing done in the Model layer
    so that "cpassword" can be compared with "password" before hashing */
    const doc = new UserModel({
      name: name,
      email: email,
      password: password,
      cpassword,
      phone: phone,
      admin: admin,
    });
    const saved_user = await doc.save(); // cpassword will be removed just before save
    console.log(`saved user form awaiting user.save(): ${saved_user}`);
    //const saved_user = await UserModel.findOne({ email: email });
    // Generate JWT Token
    const token = jwt.sign(
      { userID: saved_user._id },
      process.env.JWT_SECRET_KEY,
      { expiresIn: "5d" }
    );
    res.status(201).send({
      status: "success",
      message: "Registration Success",
      token: token,
    });
  } catch (error) {
    console.log(error);
    next(error); // call our express errorHandler

    //res.send({ status: "failed", message: "Unable to Register" });
  }
};

const userLogin = async (req, res, next) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return next(new Problem("All Fields are Required", 400));
    }

    const user = await UserModel.findOne({ email: email });
    if (!user) {
      return next(new Problem("You are not a Registered User", 400));
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!(user.email === email) || !isMatch) {
      return next(new Problem("Email or Password is not Valid", 400));
    }
    // Generate JWT Token
    const token = jwt.sign({ userID: user._id }, process.env.JWT_SECRET_KEY, {
      expiresIn: "5d",
    });
    res.send({
      status: "success",
      message: "Login Success",
      token: token,
    });
  } catch (error) {
    console.log(error);
    next(error); //call errorHandler
    //res.send({ status: "failed", message: "Unable to Login" });
  }
};

const changeUserPassword = async (req, res, next) => {
  try {
    const { password, cpassword } = req.body;
    if (!password || !cpassword) {
      return next(new Problem("All Fields are Required", 400));
    }
    if (password !== cpassword) {
      return next(
        new Problem("New Password and Confirm New Password doesn't match", 400)
      );
    }
    const salt = await bcrypt.genSalt(10);
    const newHashPassword = await bcrypt.hash(password, salt);
    await UserModel.findByIdAndUpdate(req.user._id, {
      $set: { password: newHashPassword },
    });
    res.send({
      status: "success",
      message: "Password changed succesfully",
    });
  } catch (error) {
    console.log(error);
    next(error); //call errorHandler
  }
};

export { userRegistration, userLogin, changeUserPassword };
